LGPL (Compatible with GPLv2) GeoIP Lib - http://www.maxmind.com/app/c

Shared Function Pack - http://forums.graalonline.com/forums/showthread.php?t=81277
NPC Server Functions - http://wiki.graal.net/index.php/Creation/Dev/Script_Functions:_NPC_Server
Stefan Wisdom        - http://wiki.graal.net/index.php/Creation/Dev/GScript/Stefan_Wisdom
onPlayerKilled(victim, killer) event for the classic hitpoint system
scripted baddy (only good if gs2 clientside) - http://forums.graalonline.com/forums/showthread.php?t=134258428
Serverside Commands - http://wiki.graal.us/CategoryFunctionServerside

Script of weapon -system added/updated.
Script of weapon -system added/updated.
The npc db_flags has been added
The script of npc db_flags has been updated
The flags of npc db_flags have been updated
Script gralats saved and all npcs of this class are updated.

- when you load a player object with new TServerPlayer(accountname) (don't forget to call destroy() on it after using it) you can now access the level name via "TServerPlayer.levelname". You can also change that level for offline players although it's in beta (you can set x and y of offline players only to values between 0 and 64 so it will not work fine with gmaps).

commands.rtf -> ./Graal.exe -listscriptfunctions

The /scripthelp command shows all functions and built-in variables, although there are some which don't have a description yet. Also the events are not displayed right now although they have been added to -listscriptfunctions in the recent months.

Update: added description of server-side object events to /scripthelp to the next npcserver release.

if (findweapon("WeaponName").hasSkill())
{
	// do some stuff here
}  

    this.x, this.y, this.dir, this.hp, this.ap
    this.hp on serverside
    this.width, this.height, this.image 

A new npcserver has been uploaded to all machines, Era and Unholy Nation has already been restarted. We have fixed a few smaller memory leaks and changed some stuff to use less memory. There are also a few new commands to be able to manage memory usage better:

Script:
getProcessCPUUsage() - returns float - CPU usage of the game/server (0-1) in the previous minute, multiply with 100 to get a percentage
getProcessUptime() - returns integer - total number of seconds since the game/server started
getMemoryUsage() - returns integer
getMemoryStatsObjects() - returns integer - returns the total memory taken by objects, beta (like /memstats)

RC chat:
New commands to analyze the memory usage of script objects and levels, this not very exact right now but can be used to find npcs which take a lot of memory:
/memstats
/memstats full
/memstats npc name
/memstats level name


function onCreated()
{
  temp.req = requestsql("SELECT * FROM sqlite_master", true);
  echo(temp.req.rows[0][2]);
}
... Would output the name of the first table of the database sqlite_master.


  Global variables

Variables without leading are global now. While on clientside that was already the case in the old scripting engine, on serverside those variables were formerly only accessible in the current script. If you are using such variables, don't trust that other scripts are not modifying it. Eventually rename those variables, or use this.variables which are only working for the current object, or temp.variables which are only working in the current function body. 


Is there a way to make findLevel return the actual level instead of the gmap the player's on?

public function getPreciseLevelName()
{
	if (this.level.name.ends(".gmap"))
	{
		return this.level.getmappartfile(this.x, this.y);
	}

	return this.level.name;
}  

Ok added an event: add an npc GlobalShopControl:
PHP Code:
function onReceiveText(texttype, textoption, textlines)
{
	if (texttype=="lister" && textoption=="prepareobserver") 
		echo("account " @ textlines[0] @ " will be switched to observer mode in 5 seconds!");
}  


You can trigger npcs, you just need to know the (serverside) name of the npc: triggerserver("npc", npcname, eventname, params..)

- scripts can now access image files (png, gif, jpeg) and also files inside the levels folder if the npcserver has the rights for that

New NPC-option: newnpcstorage=true
We have added a new option for optimized storage of npcs (putnpcs2).

By default those npcs are all stored in the same folder and loaded at startup. The problem is that some servers started to use huge amounts of those npcs or storing tons of data in them. That makes the startup take a lot of time, and the server takes a lot of memory.

But many of those npcs don't need to be loaded at startup and don't need to sit in the memory all the time. They are like local npcs, but want to store additional data.

For that there is now a new option:
Server-options: newnpcstorage=true
NPC-variable: this.savelocally = true;

If the new npc storage is enabled, and you set the flag savelocally = true, then the npc is saved into a subfolder (uses the level name as folder name) and is only loaded when that level is loaded (when a player enters the room).

There are still onSwitchPlayerToObserver and onSwitchObserverToPlayer, and a few months ago it has been changed to also do onPlayerLogin, onPlayerLogout and onActionPlayerOnline to work better with servers by default.


Generating xml:

PHP Code:
temp.xml = "";
with (temp.xml.addArrayMember("friends")) {
  for (temp.pl: allplayers) {
    with (addArrayMember("friend")) {
      addArrayMember("account").addArrayMember("text") = temp.pl.account;
      addArrayMember("nick").addArrayMember("text") = temp.pl.nick;
    }
  }
}
player.sendToClient("friends", temp.xml.savexmltostring()); 
Reading XML:
PHP Code:
temp.xml.loadxmlfromstring(data);
if (temp.xml.size() >= 1 && temp.xml[0].name=="friends") {
  for (temp.i=0; temp.i<temp.xml[0].size(); temp.i++) {
    if (temp.xml[0][temp.i].name=="friend") {
      echo("account: " @ temp.xml[0][temp.i].getArrayMember("account").text);
      echo("nick: " @ temp.xml[0][temp.i].getArrayMember("nick").text);
    }
  }
} 
You can also use node attributes, there are some small things to keep care of though, "name" will be renamed to "xmlname", and "text" will automatically hold the first "text" attribute.


  TProjectile (TGraalVar):
    angle - float (read only)
    fromplayer - object
    horiz - boolean (read only)
    params - string
    speed - float (read only)
    x - float (read only)
    y - float (read only)
    z - float (read only)
    zspeed - float (read only)
    destroy()

 TServerPlayer (TGaniObject):
      account - string (read only)
      ani - string
      aniparams - string
      ap - integer
      arrows - integer
      attached - boolean (read only)
      attachid - integer (read only)
      attachtype - integer (read only)
      body - string
      bodyimg - string
      bombs - integer
      canspin - boolean (read only)
      carriesblackstone - boolean (read only)
      carriesbush - boolean (read only)
      carriesnpc - boolean (read only)
      carriessign - boolean (read only)
      carriesstone - boolean (read only)
      carriesvase - boolean (read only)
      chat - string
      darts - integer
      deaths - integer
      dir - integer
      fullhearts - integer
      glovepower - integer
      graalversion - float (read only)
      gralats - integer
      guild - string
      head - string
      headimg - string
      headset - integer
      hearts - float
      horseimg - string
      hp - float
      id - integer (read only)
      isfemale - boolean
      ismale - boolean
      kills - integer
      language - string (read only)
      languagedomain - string (read only)
      lastdead - integer (read only)
      level - object (read only)
      logintime - integer (read only)
      maxhp - integer
      movementlimit - float
      mp - integer
      nick - string
      onlinetime - integer (read only)
      pause - boolean (read only)
      paused - boolean (read only)
      platform - string (read only)
      rating - float
      ratingd - float
      rupees - integer
      shield - string
      shieldimg - string
      shieldpower - integer
      sprite - integer
      sword - string
      swordimg - string
      swordpower - integer
      trial - boolean (read only)
      upgradestatus - string (read only)
      version - float (read only)
      weapons - object (read only)
      x - float
      y - float
      z - float
      addweapon(str)
      attachplayertoobj(int, int)
      callweapon(int, params...)
      detachplayer()
      disableweapons()
      enableweapons()
      findweapon(str) - returns object
      freezeplayer2()
      hasright(str, str) - returns boolean
      makescreenshot(str)
      removeweapon(str)
      say(int)
      say2(str)
      sendpm(str)
      sendrpgmessage(str)
      setani(str, str)
      setbeltcolor(str)
      setcoatcolor(str)
      setgender(str)
      sethead(str)
      setlevel2(str, float, float)
      setshield(str, int)
      setshoecolor(str)
      setskincolor(str)
      setsleevecolor(str)
      setsword(str, int)
      triggerclient(str)
      unfreezeplayer()

Server Request Data

Notice
Client-RC functionality is no longer available to local scripts on a server; only those added to the player on the login server such as the Scripted RC.

Definition
It is possible to use the requesttext and sendtext functions in order to communicate more directly with the gserver. There are many uses for using requesttext and sendtext, such as with the in-game IRC, Client-RC, and serverlist interaction.

Normally there are three parts to a request: the type, the option and with sendtext, the lines of data you wish to send, for example:

requesttext("class", "testclass");
sendtext("class", "testclass", {"// My test class", "// Scripted by Skyld"});

The data is received using the onReceiveText method, for example:

function onReceiveText(temp.texttype, temp.textoption, temp.textlines)
{
  switch (temp.texttype)
  {
    case "irc":
    {
      //
    }

    // ...
  }
}

Possible parameters

requesttext("clientrc", int 1 or 0); - opens/closes a Client-RC session (only works if you have admin rights set up correctly on the server)

requesttext("list", NULL); - returns the serverlist (Tested, Does not work with normal scripts)
requesttext("simplelist", NULL); - returns a simplified version of the serverlist (Tested, Does not work with normal scripts)
requesttext("upgradeinfo", NULL); ^ - returns the upgrade information of the current player
requesttext("bantypes", NULL); - returns possible ban types (Client-RC)
requesttext("localbans", NULL); - returns a list of local bans (Client-RC)

requesttext("pmservers", NULL); ^ - returns a list of public servers (used in the playerlist)
requesttext("pmserverplayers", str servername); ^ - shows the players of a given server in the playerlist
requesttext("pmunmapserver", str servername); ^ - hides the players of a given server in the playerlist
requesttext("pmguilds", NULL); ^ - returns a list of the guild tags currently in use
requesttext("pmguildplayers", str guildname); ^ - shows the players wearing the given guild tag in the playerlist
requesttext("pmunmapguild", str guildname); ^ - hides the players wearing the given guild tag in the playerlist

Requests marked with a ^ are special requests that might not be accessible by normal scripts, i.e. for privileged scripts such as the playerlist and serverlist.

requesttext("weaponlist", NULL); - retrieves the weapon list from the server (Client-RC)
requesttext("classlist", NULL); - retrieves the class list from the server (Client-RC)
requesttext("npclist", NULL); - retrieves the DB NPC list from the server (Client-RC)
requesttext("weapon", str weaponname); * - returns the weapon script of the given weapon (Client-RC)
requesttext("class", str classname); * - returns the class script of the given class (Client-RC)
requesttext("npc", str npcname/int npcid); * - returns the NPC script of the given DB NPC (Client-RC)
requesttext("npcflags", str npcname/int npcid); * - returns the flag list of the given DB NPC (Client-RC)
requesttext("options", NULL); * - returns the server options (Client-RC)
requesttext("folderconfig", NULL); * - returns the folder config (Client-RC)
requesttext("serverflags", NULL); * - returns the server flags (Client-RC)
requesttext("folders", NULL); - retrieves a list of folders accessible to RC (Client-RC)
requesttext("folder", str foldername); - retrieves a list of files in the given folder (Client-RC)
requesttext("rights", str accountname); * - returns the local rights of the player (Client-RC)
requesttext("comments", str accountname); * - returns the local comments of the player (Client-RC)
requesttext("playerflags", str accountname); * - returns the script flags of the given player (Client-RC)
requesttext("playerweapons", str accountname); * - returns the weapons list of the given player (Client-RC)
requesttext("playerchests", str accountname); * - returns the chest list of the given player (Client-RC)
requesttext("playerattributes", str accountname); * - returns the basic attributes of the given player (Client-RC)
requesttext("nextdbnpcid", NULL); - retrieves the next available DB NPC ID (Client-RC)
requesttext("scripthelp", str searchterm); - searches scripthelp texts for information on commands and objects (Client-RC)

Requests marked with * are similar in requesting as they are sending data back using sendtext, i.e. to send a new weapons list.

requesttext("playerweapons", "Skyld"); // requesting
sendtext("playerweapons", "Skyld", {"Test/NPC", "Foo/Bar"}); // sending a new list

sendtext("adminmessage", int playerid, str message); - sends an admin message to a player (Client-RC)
sendtext("disconnect", int playerid, str disconnectreason); - disconnects the given player ID (Client-RC)
sendtext("lister", "getbanhistory", str accountname); - gets the ban history of a player's account
sendtext("lister", "staffactivity", str accountname); - gets the staff activity of a player's account
sendtext("resetnpc", str npcname/int npcid, NULL); - resets the given DB NPC (Client-RC)
sendtext("deleteweapon", str weaponname, NULL); - deletes the given weapon (Client-RC)
sendtext("deleteclass", str classname, NULL); - deletes the given class (Client-RC)
sendtext("deletenpc", str npcname, NULL); - deletes the given DB NPC (Client-RC)





I think using TSocket is simplier, since the command would need to handle authentication, severel parameters etc.

This is a GET request with authentication:
PHP Code:
temp.socket = new TSocket("MySocket");
temp.socket.connect(myip, 80);
temp.delim = char(13) @ char(10);
temp.socket.send("Get /index.php?test=123" @ temp.delim);
temp.socket.send("Authorization: Basic " @ base64encode("username:password") @ temp.delim);
temp.socket.send(temp.delim);
waitfor(temp.socket, "onClose", 10);
temp.answer = temp.socket.data.tokenize('\n'); 
The URL encoding is already done in the engine, can add a function to use it by script (urlencode)
Update: added urlencode(url) on Kingdoms, can upload a version for hosted servers end of the week along with the recent /scripthelp improvements.
.
